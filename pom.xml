<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.test</groupId>
    <artifactId>lock</artifactId>
    <version>1.0</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <!--<maven-assembly-plugin.version>3.5.0</maven-assembly-plugin.version>-->
        <maven-shade-plugin.version>3.4.1</maven-shade-plugin.version>
        <commons-lang3.version>3.12.0</commons-lang3.version>
        <slf4j-api.version>2.0.5</slf4j-api.version>
        <lombok.version>1.18.24</lombok.version>
        <!-- logback jdk 1.8 use 1.3, jdk 17 use 1.4-->
        <logback.version>1.4.5</logback.version>
        <junit-jupiter-api.version>5.9.0</junit-jupiter-api.version>
        <jol.version>0.17</jol.version>
    </properties>

    <!--IDEA 2021.2.2 最高只支持 maven 3.6.3-->
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons-lang3.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j-api.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit-jupiter-api.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.openjdk.jol</groupId>
            <artifactId>jol-core</artifactId>
            <version>${jol.version}</version>
        </dependency>
    </dependencies>

    <!--
    maven-jar-plugin
    指挥打包本项目得class，不会将依赖的jar包打入，依赖的jar放入同级得lib文件夹即可

    maven-assembly-plugin
    Assembly 插件支持将项目的所有依赖、文件都打包到同一个输出文件中

    maven-shade-plugin 比 maven-assembly-plugin 功能更为强大
    通常使用 maven-shade-plugin 就能够完成大多数的打包需求，
    其配置简单且适用性最广，因此建议优先使用此方式;
    target会生成两个jar包，original开头的是不包含依赖的包
    -->
    <build>
        <finalName>lock</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven-shade-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <!--<goals>
                            <goal>shade</goal>
                        </goals>-->
                        <configuration>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.test.Main</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>